# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"compute_leaves": "00_activations.ipynb",
         "create_linear_node_comparator": "00_activations.ipynb",
         "create_parent_of": "00_activations.ipynb",
         "create_leaf_to_path": "00_activations.ipynb",
         "shift_bit_eps": "00_activations.ipynb",
         "create_base_vectors": "00_activations.ipynb",
         "create_linear_system": "00_activations.ipynb",
         "BitComparison": "00_activations.ipynb",
         "sigmoid_path_to_weight": "00_activations.ipynb",
         "sigmoid_path_to_linear": "00_activations.ipynb",
         "sigmoid_linear_leaf_matcher": "00_activations.ipynb",
         "sigmoid_classification_head": "00_activations.ipynb",
         "tanh_path_to_weight": "00_activations.ipynb",
         "tanh_path_to_linear": "00_activations.ipynb",
         "tanh_linear_leaf_matcher": "00_activations.ipynb",
         "tanh_classification_head": "00_activations.ipynb",
         "NeuralTreeMaker": "01_tree.ipynb",
         "NeuralDecisionTree": "01_tree.ipynb",
         "DEFAULT_POLYNOMIAL_DEGREE": "01_tree.ipynb",
         "DEFAULT_DILATATION_FACTOR": "01_tree.ipynb",
         "DEFAULT_BOUND": "01_tree.ipynb",
         "raise_error_wrong_tree": "01_tree.ipynb",
         "SigmoidTreeMaker": "01_tree.ipynb",
         "TanhTreeMaker": "01_tree.ipynb",
         "check_output_range": "01_tree.ipynb",
         "register_output_check": "01_tree.ipynb",
         "pad_tensor": "01_tree.ipynb",
         "pad_neural_tree": "01_tree.ipynb",
         "NeuralRandomForest": "01_tree.ipynb",
         "CrossEntropyLabelSmoothing": "01_tree.ipynb",
         "print_vector": "02_seal_helper.ipynb",
         "print_ptx": "02_seal_helper.ipynb",
         "print_ctx": "02_seal_helper.ipynb",
         "print_range_ptx": "02_seal_helper.ipynb",
         "print_range_ctx": "02_seal_helper.ipynb",
         "float_to_ctx": "02_seal_helper.ipynb",
         "vrep": "02_seal_helper.ipynb",
         "create_seal_globals": "02_seal_helper.ipynb",
         "append_globals_to_builtins": "02_seal_helper.ipynb",
         "save_seal_globals": "02_seal_helper.ipynb",
         "load_seal_globals": "02_seal_helper.ipynb",
         "chebyshev_approximation": "03_polynomials.ipynb",
         "polynomial_approximation_coefficients": "03_polynomials.ipynb",
         "plot_graph_function_approximation": "03_polynomials.ipynb",
         "coeffs_to_plaintext": "03_polynomials.ipynb",
         "compute_all_powers": "03_polynomials.ipynb",
         "multiply_and_add_coeffs": "03_polynomials.ipynb",
         "polyeval_tree": "03_polynomials.ipynb",
         "eval_polynomial": "03_polynomials.ipynb",
         "test_polynomial": "03_polynomials.ipynb",
         "pad_along_axis": "04_linear.ipynb",
         "arrays_to_ptx": "04_linear.ipynb",
         "extract_diagonals": "04_linear.ipynb",
         "matrix_multiply_diagonals": "04_linear.ipynb",
         "sum_reduce": "04_linear.ipynb",
         "dot_product_plain": "04_linear.ipynb",
         "test_sum": "04_linear.ipynb",
         "test_dot_product_plain": "04_linear.ipynb",
         "to_list_and_duplicate": "05_cryptotree.ipynb",
         "to_list_and_pad": "05_cryptotree.ipynb",
         "HomomorphicModel": "05_cryptotree.ipynb",
         "HomomorphicDecisionTree": "05_cryptotree.ipynb",
         "HomomorphicNeuralRandomForest": "05_cryptotree.ipynb",
         "HomomorphicTreeEvaluator": "05_cryptotree.ipynb",
         "HomomorphicTreeFeaturizer": "05_cryptotree.ipynb",
         "ColumnSelector": "06_preprocessing.ipynb",
         "Reshaper": "06_preprocessing.ipynb",
         "Featurizer": "06_preprocessing.ipynb"}

modules = ["activations.py",
           "tree.py",
           "seal_helper.py",
           "polynomials.py",
           "linear.py",
           "cryptotree.py",
           "preprocessing.py"]

doc_url = "https://dhuynh95.github.io/cryptotree/"

git_url = "https://github.com/dhuynh95/cryptotree/tree/master/"

def custom_doc_links(name): return None
